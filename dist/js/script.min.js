function debug(a) {
    console.log(a);
}

function BaseRelation(a) {
    this.name = a;
}

function getAttrsFromTable(a) {
    for (var b = a.getElementsByTagName("th"), c = new Array(b.length), d = 0; d < b.length; d++) c[d] = b[d].innerHTML;
    return c;
}

function rowToTuple(a, b) {
    for (var c = {}, d = a.getElementsByTagName("td"), e = 0; e < b.length; e++) c[b[e]] = d[e].innerHTML;
    return c;
}

function getTuples(a, b) {
    for (var c = a.getElementsByTagName("tbody")[0].getElementsByTagName("tr"), d = new Array(c.length), e = 0; e < c.length; e++) d[e] = rowToTuple(c[e], b);
    return d;
}

function findTable(a) {
    for (var b = document.getElementsByClassName("relation"), c = 0; c < b.length; c++) {
        var d = b[c].getElementsByTagName("caption")[0];
        if (0 === d.innerText.indexOf(a)) return b[c];
    }
    throw "No such relation defined";
}

function Cross(a, b) {
    this.left = a, this.right = b;
}

function NaturalJoin(a, b) {
    this.left = a, this.right = b;
}

function getJoinAttrs(a, b) {
    joinAttrs = [];
    for (var c = 0; c < a.length; c++) -1 != b.indexOf(a[c]) && joinAttrs.push(a[c]);
    return joinAttrs;
}

function Projection(a, b) {
    this.attrs = a, this.relation = b;
}

function Selection(a, b) {
    this.predicate = a, this.relation = b;
}

function BaseRelation(a) {
    this.name = a;
}

function Selection(a, b) {
    this.predicate = a, this.relation = b;
}

function Projection(a, b) {
    this.attrs = a, this.relation = b;
}

function Renaming(a, b) {
    this.renaming = a, this.relation = b;
}

function Cross(a, b) {
    this.left = a, this.right = b;
}

function NaturalJoin(a, b) {
    this.left = a, this.right = b;
}

function ThetaJoin(a, b, c) {
    this.left = a, this.right = b, this.pred = c;
}

function applyProjection(a, b, c) {
    for (var d = getAttrsFromTable(a), e = getTuples(a, d), f = new Array(e.length), g = 0; g < e.length; g++) f[g] = project(e[g], c);
    fillTableWithTuples(b, f, c);
}

function makeTablesExpendable() {
    var a = document.getElementsByClassName("expendable"), b = document.createElement("span");
    b.classList.add("toggle"), b.innerHTML = "▼", b.style.cursor = "s-resize";
    for (var c = 0; c < a.length; c++) {
        hideTable(a[c]);
        var d = a[c].getElementsByTagName("caption")[0], e = b.cloneNode(!0);
        d.appendChild(e), e.onclick = toggleTable, foo = e;
    }
}

function toggleTable() {
    var a = this.parentElement.parentElement, b = a.getElementsByTagName("tbody")[0];
    "none" == b.style.display ? (showTable(a), a.getElementsByClassName("toggle")[0].innerHTML = "▲", 
    a.getElementsByClassName("toggle")[0].style.cursor = "n-resize") : (hideTable(a), 
    a.getElementsByClassName("toggle")[0].innerHTML = "▼", a.getElementsByClassName("toggle")[0].style.cursor = "s-resize");
}

function hideTable(a) {
    var b = a.getElementsByTagName("tbody")[0];
    b.style.display = "none";
}

function showTable(a) {
    var b = a.getElementsByTagName("tbody")[0];
    b.style.display = "";
}

function execQuery() {
    var a = document.getElementById("input").value;
    debug("Onload function called for query: " + a), document.getElementById("error_output").innerHTML = "";
    var b = document.getElementById("result_output").getElementsByTagName("table");
    b.length > 0 && b[0].remove();
    try {
        result = QueryParser.parse(a);
    } catch (c) {
        document.getElementById("error_output").innerHTML = c;
    }
    result.eval();
    var d = result.result, e = result.attrs, f = build_table(d, e);
    document.getElementById("result_output").appendChild(f);
}

function renameAttr(a, b, c) {
    return a[c] && (a[b] = a[c], delete a[c]), a;
}

function applyRename(a, b, c) {
    var d = getAttrsFromTable(a), e = getTuples(a, d), f = new Array(e.length), g = c.match(/(\w+)\s*(<-)\s*(\w+)/);
    if (null == g) for (var h = 0; h < e.length; h++) f[h] = e[h]; else {
        debug(g), debug(d);
        for (var h = 0; h < e.length; h++) f[h] = renameAttr(e[h], g[1], g[3]);
        idx = d.indexOf(g[3]), debug(idx), d[idx] = g[1];
    }
    fillTableWithTuples(b, f, d);
}

function applySelection(a, b, c) {
    for (var d = getAttrsFromTable(a), e = getTuples(a, d), f = [], g = 0; g < e.length; g++) c(e[g]) && f.push(e[g]);
    fillTableWithTuples(b, f, d);
}

function build_table(a, b) {
    var c = document.createElement("table");
    c.classList.add("relation");
    var d = document.createElement("caption");
    d.innerHTML = "RESULT", c.appendChild(d), fillTableHeader(c, b);
    var e = document.createElement("tbody");
    c.appendChild(e);
    for (var f = 0; f < a.length; f++) {
        var g = createRow(a[f], b);
        e.appendChild(g);
    }
    return c;
}

function fillTableHeader(a, b) {
    var c = document.createElement("thead"), d = document.createElement("tr");
    c.appendChild(d);
    for (var e = 0; e < b.length; e++) {
        var f = document.createElement("th");
        f.innerHTML = b[e], d.appendChild(f);
    }
    a.appendChild(c);
}

function createRow(a, b) {
    for (var c = document.createElement("tr"), d = 0; d < b.length; d++) {
        var e = document.createElement("td");
        e.innerHTML = a[b[d]], c.appendChild(e);
    }
    return c;
}

BaseRelation.prototype.eval = function() {
    var a = findTable(this.name);
    this.attrs = getAttrsFromTable(a), this.result = getTuples(a, this.attrs), debug("BaseRelation '" + this.name + "' eval()ed.");
}, Cross.prototype.eval = function() {
    this.left.eval(), this.right.eval();
    var a = this.left.result, b = this.right.result;
    this.attrs = this.left.attrs.concat(this.right.attrs), this.result = new Array();
    for (var c = 0; c < a.length; c++) for (var d = 0; d < b.length; d++) {
        var e = a[c], f = b[d], g = {};
        for (var h in e) g[h] = e[h];
        for (var h in f) g[h] = f[h];
        console.log(g), this.result.push(g);
    }
    console.log(this.result);
}, NaturalJoin.prototype.eval = function() {
    this.left.eval(), this.right.eval();
    var a = this.left.result, b = this.right.result;
    this.join_attrs = getJoinAttrs(this.left.attrs, this.right.attrs), this.result = new Array(), 
    this.attrs = new Array();
    for (var c = 0; c < this.left.attrs.length; c++) {
        var d = this.left.attrs[c];
        -1 == this.join_attrs.indexOf(d) && this.attrs.push(this.left.attrs[c]);
    }
    for (var c = 0; c < this.join_attrs.length; c++) this.attrs.push(this.join_attrs[c]);
    for (var c = 0; c < this.right.attrs.length; c++) {
        var d = this.right.attrs[c];
        -1 == this.join_attrs.indexOf(d) && this.attrs.push(this.right.attrs[c]);
    }
    for (var c = 0; c < a.length; c++) for (var e = 0; e < b.length; e++) {
        for (var f = a[c], g = b[e], h = !0, i = 0; i < this.join_attrs.length; i++) h = h && f[this.join_attrs[i]] == g[this.join_attrs[i]];
        if (h) {
            var j = {};
            for (var d in f) j[d] = f[d];
            for (var d in g) -1 == this.join_attrs.indexOf(d) && (j[d] = g[d]);
            this.result.push(j);
        }
    }
}, Projection.prototype.eval = function() {
    this.relation.eval();
    var a = this.relation.result;
    this.result = new Array();
    for (var b = 0; b < a.length; b++) {
        var c = this.project(a[b]);
        this.result.pushDistinct(c);
    }
    this.result;
}, Projection.prototype.project = function(a) {
    for (var b in a) -1 == this.attrs.indexOf(b) && delete a[b];
    return a;
}, Array.prototype.pushDistinct = function(a) {
    for (var b = 0; b < this.length; b++) {
        var c = !0;
        for (k in this[b]) c = c && this[b][k] == a[k];
        if (c) return this.length;
    }
    this.push(a);
}, Selection.prototype.eval = function() {
    this.relation.eval();
    var a = this.relation.result;
    console.log(this), this.attrs = this.relation.attrs, this.result = new Array();
    for (var b = 0; b < a.length; b++) this.predicate(a[b]) && this.result.push(a[b]);
}, QueryParser = function() {
    function a(a, b) {
        function c() {
            this.constructor = a;
        }
        c.prototype = b.prototype, a.prototype = new c();
    }
    function b(a, b, c, d, e, f) {
        this.message = a, this.expected = b, this.found = c, this.offset = d, this.line = e, 
        this.column = f, this.name = "SyntaxError";
    }
    function c(a) {
        function c(b) {
            function c(b, c, d) {
                var e, f;
                for (e = c; d > e; e++) f = a.charAt(e), "\n" === f ? (b.seenCR || b.line++, b.column = 1, 
                b.seenCR = !1) : "\r" === f || "\u2028" === f || "\u2029" === f ? (b.line++, b.column = 1, 
                b.seenCR = !0) : (b.column++, b.seenCR = !1);
            }
            return Gb !== b && (Gb > b && (Gb = 0, Hb = {
                line: 1,
                column: 1,
                seenCR: !1
            }), c(Hb, Gb, b), Gb = b), Hb;
        }
        function d(a) {
            Ib > Eb || (Eb > Ib && (Ib = Eb, Jb = []), Jb.push(a));
        }
        function e(d, e, f) {
            function g(a) {
                var b = 1;
                for (a.sort(function(a, b) {
                    return a.description < b.description ? -1 : a.description > b.description ? 1 : 0;
                }); b < a.length; ) a[b - 1] === a[b] ? a.splice(b, 1) : b++;
            }
            function h(a, b) {
                function c(a) {
                    function b(a) {
                        return a.charCodeAt(0).toString(16).toUpperCase();
                    }
                    return a.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(a) {
                        return "\\x0" + b(a);
                    }).replace(/[\x10-\x1F\x80-\xFF]/g, function(a) {
                        return "\\x" + b(a);
                    }).replace(/[\u0180-\u0FFF]/g, function(a) {
                        return "\\u0" + b(a);
                    }).replace(/[\u1080-\uFFFF]/g, function(a) {
                        return "\\u" + b(a);
                    });
                }
                var d, e, f, g = new Array(a.length);
                for (f = 0; f < a.length; f++) g[f] = a[f].description;
                return d = a.length > 1 ? g.slice(0, -1).join(", ") + " or " + g[a.length - 1] : g[0], 
                e = b ? '"' + c(b) + '"' : "end of input", "Expected " + d + " but " + e + " found.";
            }
            var i = c(f), j = f < a.length ? a.charAt(f) : null;
            return null !== e && g(e), new b(null !== d ? d : h(e, j), e, j, f, i.line, i.column);
        }
        function f() {
            var a;
            return a = g();
        }
        function g() {
            var a;
            return a = h(), a === w && (a = k(), a === w && (a = o(), a === w && (a = q(), a === w && (a = s(), 
            a === w && (a = t()))))), a;
        }
        function h() {
            var a, b;
            return a = Eb, b = i(), b !== w && (Fb = a, b = z(b)), a = b;
        }
        function i() {
            var b, c, e;
            if (b = Eb, c = [], B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 0 === Kb && d(C)), 
            e !== w) for (;e !== w; ) c.push(e), B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 
            0 === Kb && d(C)); else c = A;
            return c !== w && (Fb = b, c = D(c)), b = c;
        }
        function j() {
            var b, c, e, f, g;
            if (b = Eb, c = i(), c !== w) if (46 === a.charCodeAt(Eb) ? (e = E, Eb++) : (e = w, 
            0 === Kb && d(F)), e !== w) {
                if (f = [], B.test(a.charAt(Eb)) ? (g = a.charAt(Eb), Eb++) : (g = w, 0 === Kb && d(C)), 
                g !== w) for (;g !== w; ) f.push(g), B.test(a.charAt(Eb)) ? (g = a.charAt(Eb), Eb++) : (g = w, 
                0 === Kb && d(C)); else f = A;
                f !== w ? (Fb = b, c = G(c, f), b = c) : (Eb = b, b = A);
            } else Eb = b, b = A; else Eb = b, b = A;
            if (b === w) {
                if (b = Eb, c = [], B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 0 === Kb && d(C)), 
                e !== w) for (;e !== w; ) c.push(e), B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 
                0 === Kb && d(C)); else c = A;
                c !== w && (Fb = b, c = D(c)), b = c;
            }
            return b;
        }
        function k() {
            var b, c, e, f, h, i;
            return b = Eb, a.substr(Eb, 7) === H ? (c = H, Eb += 7) : (c = w, 0 === Kb && d(I)), 
            c !== w ? (e = l(), e !== w ? (a.substr(Eb, 2) === J ? (f = J, Eb += 2) : (f = w, 
            0 === Kb && d(K)), f !== w ? (h = g(), h !== w ? (41 === a.charCodeAt(Eb) ? (i = L, 
            Eb++) : (i = w, 0 === Kb && d(M)), i !== w ? (Fb = b, c = N(e, h), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), 
            b;
        }
        function l() {
            var a, b, c, d;
            return a = Eb, b = n(), b !== w ? (c = m(), c !== w ? (d = n(), d !== w ? (Fb = a, 
            b = O(b, c, d), a = b) : (Eb = a, a = A)) : (Eb = a, a = A)) : (Eb = a, a = A), 
            a;
        }
        function m() {
            var b;
            return a.substr(Eb, 2) === P ? (b = P, Eb += 2) : (b = w, 0 === Kb && d(Q)), b === w && (a.substr(Eb, 2) === R ? (b = R, 
            Eb += 2) : (b = w, 0 === Kb && d(S)), b === w && (a.substr(Eb, 2) === T ? (b = T, 
            Eb += 2) : (b = w, 0 === Kb && d(U)), b === w && (a.substr(Eb, 2) === V ? (b = V, 
            Eb += 2) : (b = w, 0 === Kb && d(W)), b === w && (60 === a.charCodeAt(Eb) ? (b = X, 
            Eb++) : (b = w, 0 === Kb && d(Y)), b === w && (62 === a.charCodeAt(Eb) ? (b = Z, 
            Eb++) : (b = w, 0 === Kb && d($))))))), b;
        }
        function n() {
            var b, c, e, f;
            if (b = Eb, c = j(), c !== w && (Fb = b, c = _(c)), b = c, b === w && (b = Eb, 34 === a.charCodeAt(Eb) ? (c = ab, 
            Eb++) : (c = w, 0 === Kb && d(bb)), c !== w ? (e = j(), e !== w ? (34 === a.charCodeAt(Eb) ? (f = ab, 
            Eb++) : (f = w, 0 === Kb && d(bb)), f !== w ? (Fb = b, c = cb(e), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), b === w)) {
                if (b = Eb, c = [], db.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 0 === Kb && d(eb)), 
                e !== w) for (;e !== w; ) c.push(e), db.test(a.charAt(Eb)) ? (e = a.charAt(Eb), 
                Eb++) : (e = w, 0 === Kb && d(eb)); else c = A;
                c !== w && (Fb = b, c = fb(c)), b = c;
            }
            return b;
        }
        function o() {
            var b, c, e, f, h, i;
            return b = Eb, a.substr(Eb, 4) === gb ? (c = gb, Eb += 4) : (c = w, 0 === Kb && d(hb)), 
            c !== w ? (e = p(), e !== w ? (a.substr(Eb, 2) === J ? (f = J, Eb += 2) : (f = w, 
            0 === Kb && d(K)), f !== w ? (h = g(), h !== w ? (41 === a.charCodeAt(Eb) ? (i = L, 
            Eb++) : (i = w, 0 === Kb && d(M)), i !== w ? (Fb = b, c = ib(e, h), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), 
            b;
        }
        function p() {
            var b, c, e, f;
            return b = Eb, c = j(), c !== w ? (44 === a.charCodeAt(Eb) ? (e = jb, Eb++) : (e = w, 
            0 === Kb && d(kb)), e !== w ? (f = p(), f !== w ? (Fb = b, c = lb(c, f), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), b === w && (b = Eb, c = j(), c !== w && (Fb = b, 
            c = mb(c)), b = c), b;
        }
        function q() {
            var b, c, e, f, h, i;
            return b = Eb, a.substr(Eb, 5) === nb ? (c = nb, Eb += 5) : (c = w, 0 === Kb && d(ob)), 
            c !== w ? (e = r(), e !== w ? (a.substr(Eb, 2) === J ? (f = J, Eb += 2) : (f = w, 
            0 === Kb && d(K)), f !== w ? (h = g(), h !== w ? (41 === a.charCodeAt(Eb) ? (i = L, 
            Eb++) : (i = w, 0 === Kb && d(M)), i !== w ? (Fb = b, c = pb(e, h), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), 
            b;
        }
        function r() {
            var b, c, e, f;
            if (b = Eb, c = [], B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 0 === Kb && d(C)), 
            e !== w) for (;e !== w; ) c.push(e), B.test(a.charAt(Eb)) ? (e = a.charAt(Eb), Eb++) : (e = w, 
            0 === Kb && d(C)); else c = A;
            return c !== w ? (a.substr(Eb, 2) === qb ? (e = qb, Eb += 2) : (e = w, 0 === Kb && d(rb)), 
            e !== w ? (f = j(), f !== w ? (Fb = b, c = sb(c, f), b = c) : (Eb = b, b = A)) : (Eb = b, 
            b = A)) : (Eb = b, b = A), b === w && (b = i()), b;
        }
        function s() {
            var b, c, e, f, h, i;
            return b = Eb, 40 === a.charCodeAt(Eb) ? (c = tb, Eb++) : (c = w, 0 === Kb && d(ub)), 
            c !== w ? (e = g(), e !== w ? (a.substr(Eb, 8) === vb ? (f = vb, Eb += 8) : (f = w, 
            0 === Kb && d(wb)), f !== w ? (h = g(), h !== w ? (41 === a.charCodeAt(Eb) ? (i = L, 
            Eb++) : (i = w, 0 === Kb && d(M)), i !== w ? (Fb = b, c = xb(e, h), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A), 
            b;
        }
        function t() {
            var b, c, e, f, h, i, j, k;
            return b = Eb, 40 === a.charCodeAt(Eb) ? (c = tb, Eb++) : (c = w, 0 === Kb && d(ub)), 
            c !== w ? (e = g(), e !== w ? (a.substr(Eb, 7) === yb ? (f = yb, Eb += 7) : (f = w, 
            0 === Kb && d(zb)), f !== w ? (h = l(), h !== w ? (a.substr(Eb, 2) === J ? (i = J, 
            Eb += 2) : (i = w, 0 === Kb && d(K)), i !== w ? (j = g(), j !== w ? (41 === a.charCodeAt(Eb) ? (k = L, 
            Eb++) : (k = w, 0 === Kb && d(M)), k !== w ? (Fb = b, c = Ab(e, h, j), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, 
            b = A)) : (Eb = b, b = A), b === w && (b = Eb, 40 === a.charCodeAt(Eb) ? (c = tb, 
            Eb++) : (c = w, 0 === Kb && d(ub)), c !== w ? (e = g(), e !== w ? (a.substr(Eb, 7) === Bb ? (f = Bb, 
            Eb += 7) : (f = w, 0 === Kb && d(Cb)), f !== w ? (h = g(), h !== w ? (41 === a.charCodeAt(Eb) ? (i = L, 
            Eb++) : (i = w, 0 === Kb && d(M)), i !== w ? (Fb = b, c = Db(e, h), b = c) : (Eb = b, 
            b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)) : (Eb = b, b = A)), 
            b;
        }
        var u, v = arguments.length > 1 ? arguments[1] : {}, w = {}, x = {
            start: f
        }, y = f, z = function(a) {
            return new BaseRelation(a);
        }, A = w, B = /^[a-zA-Z]/, C = {
            type: "class",
            value: "[a-zA-Z]",
            description: "[a-zA-Z]"
        }, D = function(a) {
            return a.join("");
        }, E = ".", F = {
            type: "literal",
            value: ".",
            description: '"."'
        }, G = function(a, b) {
            return a + "." + b.join("");
        }, H = "\\sigma[", I = {
            type: "literal",
            value: "\\sigma[",
            description: '"\\\\sigma["'
        }, J = "](", K = {
            type: "literal",
            value: "](",
            description: '"]("'
        }, L = ")", M = {
            type: "literal",
            value: ")",
            description: '")"'
        }, N = function(a, b) {
            return new Selection(a, b);
        }, O = function(a, b, c) {
            return Function("tuple", "return " + a + b + c);
        }, P = "==", Q = {
            type: "literal",
            value: "==",
            description: '"=="'
        }, R = "!=", S = {
            type: "literal",
            value: "!=",
            description: '"!="'
        }, T = "<=", U = {
            type: "literal",
            value: "<=",
            description: '"<="'
        }, V = ">=", W = {
            type: "literal",
            value: ">=",
            description: '">="'
        }, X = "<", Y = {
            type: "literal",
            value: "<",
            description: '"<"'
        }, Z = ">", $ = {
            type: "literal",
            value: ">",
            description: '">"'
        }, _ = function(a) {
            return "tuple['" + a + "']";
        }, ab = '"', bb = {
            type: "literal",
            value: '"',
            description: '"\\""'
        }, cb = function(a) {
            return '"' + a + '"';
        }, db = /^[0-9]/, eb = {
            type: "class",
            value: "[0-9]",
            description: "[0-9]"
        }, fb = function(a) {
            return parseInt(a.join(""), 10);
        }, gb = "\\pi[", hb = {
            type: "literal",
            value: "\\pi[",
            description: '"\\\\pi["'
        }, ib = function(a, b) {
            return new Projection(a, b);
        }, jb = ",", kb = {
            type: "literal",
            value: ",",
            description: '","'
        }, lb = function(a, b) {
            return [ a ].concat(b);
        }, mb = function(a) {
            return [ a ];
        }, nb = "\\rho[", ob = {
            type: "literal",
            value: "\\rho[",
            description: '"\\\\rho["'
        }, pb = function(a, b) {
            return new Renaming(a, b);
        }, qb = "<-", rb = {
            type: "literal",
            value: "<-",
            description: '"<-"'
        }, sb = function(a, b) {
            return a.join("") + "<-" + b;
        }, tb = "(", ub = {
            type: "literal",
            value: "(",
            description: '"("'
        }, vb = ")\\times(", wb = {
            type: "literal",
            value: ")\\times(",
            description: '")\\\\times("'
        }, xb = function(a, b) {
            return new Cross(a, b);
        }, yb = ")\\join[", zb = {
            type: "literal",
            value: ")\\join[",
            description: '")\\\\join["'
        }, Ab = function(a, b, c) {
            return new ThetaJoin(a, c, b);
        }, Bb = ")\\join(", Cb = {
            type: "literal",
            value: ")\\join(",
            description: '")\\\\join("'
        }, Db = function(a, b) {
            return new NaturalJoin(a, b);
        }, Eb = 0, Fb = 0, Gb = 0, Hb = {
            line: 1,
            column: 1,
            seenCR: !1
        }, Ib = 0, Jb = [], Kb = 0;
        if ("startRule" in v) {
            if (!(v.startRule in x)) throw new Error("Can't start parsing from rule \"" + v.startRule + '".');
            y = x[v.startRule];
        }
        if (u = y(), u !== w && Eb === a.length) return u;
        throw u !== w && Eb < a.length && d({
            type: "end",
            description: "end of input"
        }), e(null, Jb, Ib);
    }
    return a(b, Error), {
        SyntaxError: b,
        parse: c
    };
}(), window.onload = function() {
    makeTablesExpendable(), document.getElementById("computeitlikeabauss").onclick = execQuery, 
    document.getElementById("input").onkeypress = function(a) {
        a || (a = window.event);
        var b = a.keyCode || a.which;
        "13" == b && execQuery();
    };
};